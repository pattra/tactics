(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/pattra/Documents/dev/GitHub/tactics/src/js/entities/charBattleDetail.js":[function(require,module,exports){
'use strict';

const CharBattleDetail = function (game, x, y, properties) {
  this.vitals = game.add.group();
  this.vitals.visible = false;
  this.text = {};
  this.handler = properties.actionHandler;

  const style = { font: '24px Arial', fill: '#ff0044' };

  /* full detail panel */
  this.text.name = game.add.text(0, game.world.centerY, properties.name, style, this.vitals);
  this.text.hp = game.add.text(0, game.world.centerY + 50, properties.maxHP + '/' + properties.maxHP, style, this.vitals);

  /* actions */
  this.text.move = game.add.text(0, game.world.centerY + 100, 'Move Character', style, this.vitals);
  this.text.move.inputEnabled = true;
  this.text.move.events.onInputDown.add(() => { this.handler('move', { loc: properties.loc }); });

  this.toggleDisplay = () => {
    this.vitals.visible = !this.vitals.visible;
  };

  this.updateHP = (current, max) => {
    this.text.hp.setText(current + '/' + max);
  };
};

CharBattleDetail.prototype.constructor = CharBattleDetail;

/**
 * Automatically called by World.update
 */
CharBattleDetail.prototype.update = function () {
};

module.exports = CharBattleDetail;

},{}],"/Users/pattra/Documents/dev/GitHub/tactics/src/js/entities/charBattlePreview.js":[function(require,module,exports){
'use strict';

const CharBattlePreview = function (game, x, y, properties) {
  this.vitals = game.add.group();
  this.vitals.visible = false;
  this.text = {};

  const style = { font: '24px Arial', fill: '#ff0044' };

  /* preview panel */
  this.text.name = game.add.text(game.world.centerX, game.world.centerY, properties.name, style, this.vitals);
  this.text.hp = game.add.text(game.world.centerX, game.world.centerY + 50, properties.maxHP + '/' + properties.maxHP, style, this.vitals);

  this.toggleDisplay = (cursorOn) => {
    this.vitals.visible = cursorOn;
  };

  this.updateHP = (current, max) => {
    this.text.hp.setText(current + '/' + max);
  };
};

CharBattlePreview.prototype.constructor = CharBattlePreview;

/**
 * Automatically called by World.update
 */
CharBattlePreview.prototype.update = function () {
};

module.exports = CharBattlePreview;

},{}],"/Users/pattra/Documents/dev/GitHub/tactics/src/js/entities/character.js":[function(require,module,exports){
'use strict';

const Preview = require('../entities/charBattlePreview');
const Detail = require('../entities/charBattleDetail');

const Character = function (game, x, y, properties) {
  /* PROPERTIES */
  this.preview = new Preview(game, x, y, properties);
  this.detail = new Detail(game, x, y, properties);
  this.name = properties.name;
  this.loc = properties.loc;
  this.maxHP = properties.maxHP;
  this.currentHP = properties.maxHP;

  /* FUNCTIONS */
  this.onHover = (cursorOn) => {
    this.preview.toggleDisplay(cursorOn);
  };

  this.toggleSelect = () => {
    this.detail.toggleDisplay();
  };

  this.changeHP = (amt) => {
    this.currentHP = this.currentHP + amt;
    this.preview.updateHP(this.currentHP, this.maxHP);
    this.detail.updateHP(this.currentHP, this.maxHP);
  };

  this.changeLoc = (loc, x, y) => {
    console.log('updating', this.name, loc, x, y);
    this.loc = loc;
    this.x = x;
    this.y = y;
  };

  Phaser.Sprite.call(this, game, x, y, properties.sprite);
  game.add.existing(this);
};

Character.prototype = Object.create(Phaser.Sprite.prototype);
Character.prototype.constructor = Character;

/**
 * Automatically called by World.update
 */
Character.prototype.update = function () {
};

module.exports = Character;

},{"../entities/charBattleDetail":"/Users/pattra/Documents/dev/GitHub/tactics/src/js/entities/charBattleDetail.js","../entities/charBattlePreview":"/Users/pattra/Documents/dev/GitHub/tactics/src/js/entities/charBattlePreview.js"}],"/Users/pattra/Documents/dev/GitHub/tactics/src/js/entities/tile.js":[function(require,module,exports){
'use strict';

const Tile = function (game, x, y) {
  this.status = 'default';
  this.defaultState = 'grass';

  this.setStatus = (frameName, status) => {
    this.frameName = frameName === 'default' ? this.defaultState : frameName;
    this.status = status ? status : frameName;
  };

  Phaser.Sprite.call(this, game, x, y, 'tiles', 'grass');
  game.add.existing(this);
};

Tile.prototype = Object.create(Phaser.Sprite.prototype);
Tile.prototype.constructor = Tile;

Tile.prototype.update = function () {
};

module.exports = Tile;

},{}],"/Users/pattra/Documents/dev/GitHub/tactics/src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'tactics-game');

window.Utils = require('./utils');
window.playerState = {
  currentLevel: 'Game',
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"/Users/pattra/Documents/dev/GitHub/tactics/src/js/states/boot.js","./states/game":"/Users/pattra/Documents/dev/GitHub/tactics/src/js/states/game.js","./states/menu":"/Users/pattra/Documents/dev/GitHub/tactics/src/js/states/menu.js","./states/preloader":"/Users/pattra/Documents/dev/GitHub/tactics/src/js/states/preloader.js","./states/splash":"/Users/pattra/Documents/dev/GitHub/tactics/src/js/states/splash.js","./utils":"/Users/pattra/Documents/dev/GitHub/tactics/src/js/utils.js"}],"/Users/pattra/Documents/dev/GitHub/tactics/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"/Users/pattra/Documents/dev/GitHub/tactics/src/js/states/game.js":[function(require,module,exports){
'use strict';

const Character = require('../entities/character');
const Tile = require('../entities/tile');

const MAP_SIZE = 3;
const MAP_TOTAL_TILES = 9;

const PLAYER_FILE = {
  party: [
    {
      name: 'Sobel',
      maxHP: 10,
      isPlayer: true,
      defaultLoc: 3,
      loc: 3,
    },
    {
      name: 'Fenris',
      maxHP: 15,
      defaultLoc: 5,
      loc: 5,
    },
    {
      name: 'Corrin',
      maxHP: 15,
      defaultLoc: 2,
      loc: 2,
    },
  ],
};

const Game = function () {
  this.charFocus = null;
  this.playerMap = [];
  this.enemyMap = [];
};

module.exports = Game;

Game.prototype = {

  init: function (param) {
    // console.log(param);
  },

  create: function () {
    const mapOffset = 400;
    let i;
    let j;

    /* INIT TILES */
    for (i = 0; i < MAP_SIZE; i++) {
      for (j = 0; j < MAP_SIZE; j++) {
        let playerTile;
        let enemyTile;

        // player tiles
        playerTile = new Tile(this.game, j * 100, i * 100);
        this.playerMap.push({
          tile: playerTile,
          x: j * 100,
          y: i * 100,
        });

        // enemy tiles
        enemyTile = new Tile(this.game, j * 100 + mapOffset, i * 100);
        this.enemyMap.push({
          tile: enemyTile,
          x: j * 100,
          y: i * 100,
        });
      }
    }

    /* INIT CHARACTERS */
    PLAYER_FILE.party.forEach((char, index) => {
      // TODO: error checking for location overlaps
      let slot = this.playerMap[char.defaultLoc];
      slot.character = new Character(this.game, slot.x, slot.y, Object.assign(char, {
        team: 'ally',
        sprite: 'ally',
        actionHandler: this._actionHandler.bind(this),
      }));

      slot.character.inputEnabled = true;
      slot.character.events.onInputOver.add(() => { slot.character.onHover(true); });
      slot.character.events.onInputOut.add(() => { slot.character.onHover(false); });
      slot.character.events.onInputDown.add(() => { this.selectCharacter(slot.character); });
    });
  },

  update: function () {

  },

  onInputDown: function () {
    this.game.state.start('Menu');
  },

  selectCharacter: function (character) {
    if (this.charFocus && this.charFocus !== character.loc
        && this.playerMap[this.charFocus].character !== character) {
      this.playerMap[this.charFocus].character.toggleSelect();
    }

    if (this.charFocus && this.playerMap[this.charFocus].character === character) {
      this.charFocus = null;
    } else {
      this.charFocus = character.loc;
    }

    character.toggleSelect();
  },

  _enableMove: function (loc) {
    const char = this.playerMap[loc].character;
    this.playerMap.forEach((val, index) => {
      val.tile.inputEnabled = true;
      if (val.character) val.character.inputEnabled = false;

      val.tile.setStatus('selectable');
      val.tile.events.onInputDown.add(() => { this._selectTile('move', loc, index); });
    });
  },

  _selectTile: function (action, origin, target) {
    const originSlot = this.playerMap[origin];
    const targetSlot = this.playerMap[target];

    if (action === 'move') {
      const char = originSlot.character;
      const swapChar = targetSlot.character;
      char.changeLoc(target, targetSlot.x, targetSlot.y);
      if (swapChar) swapChar.changeLoc(origin, originSlot.x, originSlot.y);

      this.playerMap.forEach((val) => {
        val.tile.setStatus('default');
        if (val.character) {
          val.character.inputEnabled = true;
          val.character.onHover(false);
        }
      });
    }
  },

  _actionHandler: function (action, params) {
    if (action === 'move') {
      this._enableMove(params.loc);
    }
  },
};

},{"../entities/character":"/Users/pattra/Documents/dev/GitHub/tactics/src/js/entities/character.js","../entities/tile":"/Users/pattra/Documents/dev/GitHub/tactics/src/js/entities/tile.js"}],"/Users/pattra/Documents/dev/GitHub/tactics/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],"/Users/pattra/Documents/dev/GitHub/tactics/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);

    /* loading sprites */
    this.load.image('ally', 'assets/ally.png');
    this.load.image('enemy', 'assets/enemy.png');

    /* loading texture atlases */
    this.load.atlasJSONHash('tiles', 'assets/tiles.png', 'assets/tiles.json');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Game', true, false, { test: 1 });
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  },
};

},{}],"/Users/pattra/Documents/dev/GitHub/tactics/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"/Users/pattra/Documents/dev/GitHub/tactics/src/js/utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["/Users/pattra/Documents/dev/GitHub/tactics/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
